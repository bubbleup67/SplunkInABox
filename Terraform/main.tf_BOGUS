provider "aws" {
  shared_credentials_file = "/Users/bubbleup/.aws/creds"
  profile                 = "johnraycool"
  region     = "${var.region}"
}

data "aws_s3_bucket" "splunkSupport" {
  bucket = "splunk-support"
}

output "s3_id" {
    value = "${data.aws_s3_bucket.splunkSupport.id}"
}

/*
resource "aws_security_group" "allow_all" {
  name        = "allow_all"
  description = "Allow all inbound traffic"
  vpc_id      = "vpc-b81aacd0"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["${var.myIp}"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}


resource "aws_instance" "example" {
  ami           = "ami-f63b1193"
  instance_type = "t2.micro"
  key_name = "JR-East2"
  security_groups = ["${aws_security_group.allow_all.name}"]
  
  # Tells Terraform that this EC2 instance must be created only after the
  # S3 bucket has been created.
  depends_on = ["aws_s3_bucket.example"]
  
  provisioner "local-exec" {
    command = "echo ${aws_instance.example.public_ip} > ip_address.txt;echo ${module.s3.id} >> ip_address.txt"
  }
  
  provisioner "file" {
    source      = "/etc/hosts"
    destination = "/home/ec2-user/hosts.JR"

    connection {
      type     = "ssh"
      user     = "ec2-user"
    }
  }
}
*/